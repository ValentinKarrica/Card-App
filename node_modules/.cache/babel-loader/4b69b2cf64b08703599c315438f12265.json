{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport assets_data from \"../data/assets.json\";\nimport traits_data from \"../data/traits.json\";\nvar traits = traits_data.traits;\nvar assets = assets_data.assets;\nvar pageSlice = createSlice({\n  name: 'Pages',\n  initialState: {\n    charackerList: [],\n    pageList: [],\n    getSuccess: false,\n    pageNum: 1\n  },\n  reducers: {\n    createList: function createList(state, action) {\n      var limit = assets.length;\n\n      var _loop = function _loop(_i) {\n        traits.forEach(function (item) {\n          if (item.id === assets[_i].id) {\n            var element = {\n              card_element: assets[_i]\n            };\n            var newElement = Object.assign(item, element);\n            item = newElement;\n          }\n        });\n      };\n\n      for (var _i = 0; _i < limit; _i += 1) {\n        _loop(_i);\n      }\n\n      traits.forEach(function (item) {\n        var element = {\n          my: my\n        };\n        var newElement = Object.assign(item, element);\n        item = newElement;\n      });\n      var size = 4;\n      var limit2 = traits.length;\n\n      for (var i = 0; i < limit2; i += size) {\n        state.pageList.push(traits.slice(i, i + size));\n      }\n\n      state.getSuccess = true;\n    },\n    createPages: function createPages(state, action) {\n      var size = 10;\n      var limit = assets.length;\n\n      for (var i = 0; i < limit; i += size) {\n        state.pageList.push(assets_data.assets.slice(i, i + size));\n      }\n\n      state.getSuccess = true;\n    }\n  }\n});\nexport var pageActions = pageSlice.actions;\nexport default pageSlice;","map":{"version":3,"sources":["C:/Users/ΒΑΛΕΝΤΙΝΟ/Desktop/Developer/CarEx/src/store/page-slice.js"],"names":["createSlice","assets_data","traits_data","traits","assets","pageSlice","name","initialState","charackerList","pageList","getSuccess","pageNum","reducers","createList","state","action","limit","length","i","forEach","item","id","element","card_element","newElement","Object","assign","my","size","limit2","push","slice","createPages","pageActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AAEA,IAAMC,MAAM,GAAGD,WAAW,CAACC,MAA3B;AACA,IAAMC,MAAM,GAAGH,WAAW,CAACG,MAA3B;AAEA,IAAMC,SAAS,GAAGL,WAAW,CAAC;AAC1BM,EAAAA,IAAI,EAAE,OADoB;AAE1BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,aAAa,EAAE,EADL;AAEVC,IAAAA,QAAQ,EAAE,EAFA;AAGVC,IAAAA,UAAU,EAAE,KAHF;AAIVC,IAAAA,OAAO,EAAG;AAJA,GAFY;AAQ1BC,EAAAA,QAAQ,EAAE;AAENC,IAAAA,UAFM,sBAEKC,KAFL,EAEYC,MAFZ,EAEmB;AACrB,UAAMC,KAAK,GAAGZ,MAAM,CAACa,MAArB;;AADqB,iCAEZC,EAFY;AAGjBf,QAAAA,MAAM,CAACgB,OAAP,CAAe,UAAAC,IAAI,EAAG;AAClB,cAAIA,IAAI,CAACC,EAAL,KAAWjB,MAAM,CAACc,EAAD,CAAN,CAAUG,EAAzB,EAA4B;AACxB,gBAAIC,OAAO,GAAE;AAACC,cAAAA,YAAY,EAAEnB,MAAM,CAACc,EAAD;AAArB,aAAb;AACA,gBAAIM,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcN,IAAd,EAAmBE,OAAnB,CAAjB;AACAF,YAAAA,IAAI,GAAGI,UAAP;AACC;AACN,SANH;AAHiB;;AAErB,WAAK,IAAIN,EAAC,GAAC,CAAX,EAAcA,EAAC,GAACF,KAAhB,EAAuBE,EAAC,IAAE,CAA1B,EAA4B;AAAA,cAAnBA,EAAmB;AAQ3B;;AACDf,MAAAA,MAAM,CAACgB,OAAP,CAAe,UAAAC,IAAI,EAAG;AACd,YAAIE,OAAO,GAAE;AAACK,UAAAA,EAAE,EAAFA;AAAD,SAAb;AACA,YAAIH,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcN,IAAd,EAAmBE,OAAnB,CAAjB;AACAF,QAAAA,IAAI,GAAGI,UAAP;AACC,OAJT;AAMA,UAAII,IAAI,GAAG,CAAX;AACA,UAAMC,MAAM,GAAG1B,MAAM,CAACc,MAAtB;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACW,MAAhB,EAAwBX,CAAC,IAAEU,IAA3B,EAAiC;AACjCd,QAAAA,KAAK,CAACL,QAAN,CAAeqB,IAAf,CAAoB3B,MAAM,CAAC4B,KAAP,CAAab,CAAb,EAAeA,CAAC,GAACU,IAAjB,CAApB;AACC;;AACDd,MAAAA,KAAK,CAACJ,UAAN,GAAmB,IAAnB;AAEH,KA1BK;AA2BNsB,IAAAA,WA3BM,uBA2BMlB,KA3BN,EA2BaC,MA3Bb,EA2BoB;AACtB,UAAIa,IAAI,GAAG,EAAX;AACA,UAAMZ,KAAK,GAAGZ,MAAM,CAACa,MAArB;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,KAAhB,EAAuBE,CAAC,IAAEU,IAA1B,EAAgC;AAChCd,QAAAA,KAAK,CAACL,QAAN,CAAeqB,IAAf,CAAoB7B,WAAW,CAACG,MAAZ,CAAmB2B,KAAnB,CAAyBb,CAAzB,EAA2BA,CAAC,GAACU,IAA7B,CAApB;AACC;;AACDd,MAAAA,KAAK,CAACJ,UAAN,GAAmB,IAAnB;AACH;AAlCK;AARgB,CAAD,CAA7B;AA8CA,OAAO,IAAMuB,WAAW,GAAG5B,SAAS,CAAC6B,OAA9B;AACP,eAAe7B,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\nimport assets_data from \"../data/assets.json\";\r\nimport traits_data from \"../data/traits.json\";\r\n\r\nconst traits = traits_data.traits\r\nconst assets = assets_data.assets\r\n\r\nconst pageSlice = createSlice({\r\n    name: 'Pages',\r\n    initialState: {\r\n        charackerList: [],\r\n        pageList: [],\r\n        getSuccess: false,\r\n        pageNum : 1\r\n    },\r\n    reducers: {\r\n        \r\n        createList(state, action){\r\n            const limit = assets.length\r\n            for (let i=0; i<limit; i+=1){\r\n                traits.forEach(item=> {\r\n                    if (item.id=== assets[i].id){\r\n                        let element ={card_element: assets[i]}\r\n                        let newElement = Object.assign(item,element)\r\n                        item = newElement;\r\n                        }\r\n                  })\r\n            }\r\n            traits.forEach(item=> {\r\n                    let element ={my}\r\n                    let newElement = Object.assign(item,element)\r\n                    item = newElement;\r\n                    }\r\n              )\r\n            let size = 4; \r\n            const limit2 = traits.length\r\n            for (var i=0; i<limit2; i+=size) {\r\n            state.pageList.push(traits.slice(i,i+size));\r\n            }\r\n            state.getSuccess = true;\r\n            \r\n        },\r\n        createPages(state, action){\r\n            let size = 10; \r\n            const limit = assets.length\r\n            for (var i=0; i<limit; i+=size) {\r\n            state.pageList.push(assets_data.assets.slice(i,i+size));\r\n            }\r\n            state.getSuccess = true;\r\n        }\r\n    }\r\n})\r\n\r\nexport const pageActions = pageSlice.actions;\r\nexport default pageSlice;"]},"metadata":{},"sourceType":"module"}